import fitz  # PyMuPDF
from PIL import Image
import pytesseract
import cv2
import numpy as np
import re

# Функция для предобработки изображения

def preprocess_image(image):
    gray = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2GRAY)
    _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    return Image.fromarray(thresh)

# Функция для извлечения текста из первой страницы заявления

def extract_text_from_zayavlenie(pdf_path):
    pdf_document = fitz.open(pdf_path)
    page = pdf_document.load_page(0)  # Только первая страница
    pix = page.get_pixmap(matrix=fitz.Matrix(3, 3))
    img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
    preprocessed_img = preprocess_image(img)
    return pytesseract.image_to_string(preprocessed_img, lang='rus')

# Функция для извлечения текста из всех страниц дефектной ведомости

def extract_text_from_defect(pdf_path):
    pdf_document = fitz.open(pdf_path)
    extracted_text = ""
    for page_num in range(len(pdf_document)):
        page = pdf_document.load_page(page_num)
        pix = page.get_pixmap(matrix=fitz.Matrix(3, 3))
        img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
        preprocessed_img = preprocess_image(img)
        extracted_text += pytesseract.image_to_string(preprocessed_img, lang='rus') + "\n"
    return extracted_text

# Функция для определения типа документа

def detect_document_type(text):
    if re.search(r'экспертно-консультационные услуги|Заявление', text, re.IGNORECASE):
        return "Заявление"
    elif re.search(r'Дефектная ведомость', text, re.IGNORECASE):
        return "Дефектная ведомость"
    elif re.search(r'ЛОКАЛЬНЫЙ СМЕТНЫЙ РАСЧЕТ \(СМЕТА\)', text, re.IGNORECASE):
        return "Смета"
    return "Неизвестный документ"

# Функция для извлечения адреса

def extract_address(text):
    address_pattern = (
        r'(?:(?:[А-ЯЁа-яё]+\s+область),\s*)?'
        r'(?:'
            r'(?:г|д|тер|ул|пл|мкр|с|п|пр-кт|проезд)\.?\s*'
            r'[А-ЯЁа-яё\w\-\s]+'
            r'(?:[0-9]+[а-яА-Яa-zA-Z0-9\/\-]*)?'
            r'\s*,\s*'
        r')+'
        r'д\.?\s*\d+[а-яА-Яa-zA-Z0-9\/\-]*'
    )
    match = re.search(address_pattern, text, flags=re.DOTALL)
    return match.group() if match else "Адрес не найден"

# Функция для поиска системы

def extract_system(text, systems):
    for system in systems:
        if system in text:
            return system
    return "Система не найдена"

# Список систем
systems = [
    "Утепление фасада с применением навесного фасада",
    "Утепление фасада с применением системы с тонким наружным штукатурным слоем",
    "Утепление фасада с применением СУФ «Термолэнд»",
    "Ремонт (замена) козырьков подъездов",
    "Ремонт несущих конструкций с усилением конструктивных элементов",
    "Ремонт мягкой рулонной кровли, с утеплением, для многоквартирных домов, не имеющих чердачного помещения",
    "Замена балконных плит",
    "Ремонт металлической кровли",
    "Замена кровли из АЦЛ на оцинкованный профлист",
    "Ремонт чердачного помещения",
    "Замена стропильной системы",
    "Ремонт кровли из металлочерепицы",
    "Ремонт кровли из профнастила",
    "Ремонт чердачного помещения по периметру с утеплением",
    "Ремонт чердачного помещения с утеплителем СМЛ (стекломагниевые листы)",
    "Ремонт чердачного помещения с применением плит из минеральной ваты",
    "Ремонт чердачного помещения с керамзитом",
    "Переустройство невентилируемой крыши на вентилируемую крышу",
    "Замена стояков центрального отопления с радиаторами по новым отверстиям (если существующая система находится в стенах)",
    "Замена стояков центрального отопления без радиаторов по новым отверстиям (если существующая система находится в стенах)",
    "Замена стояков холодного водоснабжения по новым отверстиям (если существующая система находится в стене)",
    "Замена стояков горячего водоснабжения по новым отверстиям (если существующая система находится в стене)",
    "Замена системы канализации по новым отверстиям (если существующая система находится в стене)",
    "Замена системы внутреннего газопровода (без газовых плит)",
    "Ремонт или замена фасадного газопровода при утеплении фасада",
    "Ремонт или замена внутридомовой газовой разводки (без стоимости оборудования)",
    "Вынос газопровода из подъездов (без реконструкции внутридомового газопровода)",
    "Обрезка в земле подземного газопровода 1 место (протяженность подземного газопровода до места присоединения не выше 15 пог.м.)",
    "Ремонт внутреннего газопровода (без газовых плит) и внутридомовой газовой разводки (без стоимости оборудования) с установкой датчиков загазованности с клапанами",
    "Установка датчиков загазованности с клапанами при проведениикапитального ремонта системы газоснабжения",
    "Замена вводно-распределительного устройства",
    "Замена магистралей (стояки)",
    "Замена общедомовой системы освещения",
    "Замена этажного распределительного щита",
    "Замена вводно-распределительного устройства",
    "Замена магистралей (стояки)",
    "Замена общедомовой системы освещения",
    "Замена этажного распределительного щита",
    "Ремонт внутреннего противопожарного водопровода с заменой элементов и стройств системы",
    "Ремонт (замена) крышных котельных, относящихся к составу общего имущества",
    "Ремонт фундамента многоквартирного дома",
    "Замена лифта без направляющих, грузоподъёмностью 400 кг с количеством остановок 9",
    "Замена лифта без направляющих, грузоподъёмностью 630 кг с количеством остановок 9",
    "Ремонт лифтовой шахты",
    "Замена металлических ограждающих конструкций лифтовой шахты споследующей обшивкой тонколистовой сталью",
    "Ремонт или замена отдельного лифтового оборудования, в том числе направляющих",
    "Ремонт машинного помещения",
    "Замена лифта без направляющих грузоподъемностью 1000 кг с количеством остановок 20 без машинного помещения",
    "Замена лифта без направляющих грузоподъемностью 1000 кг с количеством остановок 20 с машинным помещением",
    "Замена лифта без направляющих грузоподъемностью 1275кг с количеством остановок 20 без машинного помещения",
    "Замена лифта без направляющих грузоподъемностью 1275кг с количеством остановок 20 с машинным помещением",
    "Установка узла управления тепловой энергии, в том числе заводской готовности, мощностью от 80 до 200 Мкал/час",
    "Установка узла управления тепловой энергии, в том числе заводской готовности, мощностью от 201 до 500 Мкал/час",
    "Установка узла управления системы горячего водоснабжения по двухступенчатой схеме подключения, в том числе заводской готовности, мощностью от 100 до 200 Мкал/час",
    "Установка узла управления системы горячего водоснабжения по двухступенчатой схеме подключения, в том числе заводской готовности, мощностью от 201 до 400 Мкал/час",
    "Установка коллективного (общедомового) узла учёта тепловой энергии и теплоносителя в системах центрального отопления, горячего водоснабжения, холодного водоснабжения",
    "Установка автоматизированного узла управления с секционными узлами, узла тепловой энергии, горячего водоснабжения, холодного водоснабжения",
    "Замена и (или) восстановление инженерных сетей многоквартирного дома",
    "Ремонт деревянного или смешанного фасада",
    "Ремонт кирпичного неоштукатуренного фасада",
    "Ремонт фасада панельного/блочного неоштукатуренного (без ремонта межпанельных швов)",
    "Ремонт фасада, облицованного плиткой",
    "Ремонт межпанельных швов",
    "Ремонт межпанельных швов (с применением канатного метода)",
    "Ремонт межпанельных швов с люльки",
    "Ремонт оштукатуренного фасада",
    "Ремонт панельного фасада, окрашенного (облицованного) с межпанельными швами",
    "Ремонт панельного фасада с устройством декоративно-защитного слоя и ремонтом межпанельных швов",
    "Замена системы наружного водостока",
    "Ремонт балконных плит",
    "Замена оконных и балконных блоков в местах общего пользования",
    "Замена входных дверей в подъезды, мусорокамеры на металлические двери в энергосберегающем исполнении",
    "Замена входных дверей в подъезды, наметаллические двери в энергосберегающем исполнении, с установкой IP-видеодомофонов без подключения",
    "Установка и разборка строительных лесов с защитной сеткой",
    "Ремонт мягкой рулонной кровли, без утепления, для многоквартирных домов, не имеющих чердачного помещения",
    "Ремонт мягкой безрулонной кровли",
    "Ремонт кровли из асбестоцементных листов",
    "Замена системы внутреннего водостока",
    "Ремонт мастичной кровли",
    "Ремонт резиновой кровли",
    "Ремонт внутридомовых инженерных систем",
    "Замена стояков центрального отопленияс радиаторами",
    "Замена стояков центрального отопления без отопительных приборов",
    "Замена стояков центрального отопления (подвал, чердак) с их теплоизоляцией и запорной арматурой",
    "Замена стояков центрального отопления в домах с подключенными к системе полотенцесушителями",
    "Вскрытие и восстановление полов квартир первых этажей при замене системы центрального отопления, холодного водоснабжения, горячего водоснабжения",
    "Замена стояков в квартирах с изоляцией и запорной арматурой",
    "Замена разводящих трубопроводов в подвале (чердаке) с изоляцией и запорной арматурой",
    "Замена стояков в квартирах с изоляцией и запорной арматурой",
    "Замена разводящих трубопроводов в подвале (чердаке) с изоляцией и запорной арматурой",
    "Замена системы канализации (стояки)",
    "Замена системы канализации (подвал)",
    "Вскрытие и восстановление полов квартир первых этажей при замене системы канализации",
    "Ремонт подвального помещения, относящегося к общему имуществу многоквартирного дома",
    "Ремонт подвального помещения, относящегося к общему имуществу многоквартирного дома методом гидроизоляции стен и полов",
    "Ремонт отмостки",
    "Ремонт скатной крыши",
    "Демонтаж ствола мусоропровода в МКД",
    "Ремонт системы горячего водоснабжения с установкой коллективных (общедомовых) приборов учета потребления ресурсов",
    "Обустройство колясочной в МКД",
    "Ремонт системы холодного водоснабжения с установкой коллективных (общедомовых) приборов учета потребления ресурсов"
]
# Обработка файлов
zayavlenie_text = extract_text_from_zayavlenie("Заявление 3.4 Трудовая 34.pdf")
zayavlenie_type = detect_document_type(zayavlenie_text)
zayavlenie_system = extract_system(zayavlenie_text, systems)
zayavlenie_address = extract_address(zayavlenie_text)

defect_text = extract_text_from_defect("3.4 ДВ Трудовая,34.pdf")
defect_type = detect_document_type(defect_text)
defect_address = extract_address(defect_text)
defect_system = extract_system(defect_text, systems)

# Проверка соответствия
address_match = "Совпадает" if zayavlenie_address == defect_address else f"Не совпадает (Заявление: {zayavlenie_address}, Дефектная ведомость: {defect_address})"
system_match = "Совпадает" if zayavlenie_system == defect_system else f"Не совпадает (Заявление: {zayavlenie_system}, Дефектная ведомость: {defect_system})"

# Вывод результатов
print(f"Документ 1: {zayavlenie_type}")
print(f"Документ 2: {defect_type}")
print(f"Извлечённый адрес из Дефектной ведомости: {defect_address}")
print(f"Система в заявлении: {zayavlenie_system}")
print(f"Система в дефектной ведомости: {defect_system}")
print(f"Совпадение адресов: {address_match}")
print(f"Совпадение систем: {system_match}")
# Сохранение в файл
with open('comparison_result.txt', 'w', encoding='utf-8') as f:
    f.write(f"Документ 1: {zayavlenie_type}\n")
    f.write(f"Документ 2: {defect_type}\n")
    f.write(f"Извлечённый адрес из Дефектной ведомости: {defect_address}\n")
    f.write(f"Система в заявлении: {zayavlenie_system}\n")
    f.write(f"Система в дефектной ведомости: {defect_system}\n")
    f.write(f"Совпадение адресов: {address_match}\n")
    f.write(f"Совпадение систем: {system_match}\n")