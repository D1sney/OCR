import os
import re
import io
import contextlib
import datetime
import pandas as pd
import numpy as np
import cv2
import fitz  # PyMuPDF
import pytesseract
from PIL import Image
from dateutil.relativedelta import relativedelta
import telebot
import time

# Токен бота (не забудьте хранить его безопасно)
TOKEN = "7617318744:AAE3XLhjDdgiksH8Yzdw7W0WQI7hqfBRReg"
bot = telebot.TeleBot(TOKEN)

# Папка для временного сохранения файлов
TEMP_DIR = "temp"
if not os.path.exists(TEMP_DIR):
    os.makedirs(TEMP_DIR)

# Словарь для хранения файлов по chat_id
user_files = {}  # {chat_id: [file_path1, file_path2, ...]}


# ==============================
# --- Функции для обработки документов ---

def preprocess_image(image):
    """Преобразует изображение в оттенки серого и выполняет бинаризацию."""
    gray = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2GRAY)
    _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    return Image.fromarray(thresh)


def correct_rotation(image):
    """Корректирует поворот изображения на основе обнаруженных линий."""
    gray = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2GRAY)
    edges = cv2.Canny(gray, 50, 150, apertureSize=3)
    lines = cv2.HoughLinesP(edges, 1, np.pi / 180, threshold=100, minLineLength=100, maxLineGap=10)
    if lines is not None:
        angles = [np.degrees(np.arctan2(y2 - y1, x2 - x1)) for x1, y1, x2, y2 in [line[0] for line in lines]]
        median_angle = np.median(angles)
        if abs(median_angle) > 45:
            median_angle -= 90
        return image.rotate(-median_angle, expand=True)
    return image


def extract_text_from_pdf(pdf_path, skip_top_fraction=None):
    """
    Извлекает текст из первой страницы PDF.
    Если указан skip_top_fraction (например, 1/6), отбрасывается верхняя часть.
    """
    doc = fitz.open(pdf_path)
    page = doc.load_page(0)
    rect = page.rect
    clip_rect = (fitz.Rect(rect.x0, rect.y0 + rect.height * skip_top_fraction, rect.x1, rect.y1)
                 if skip_top_fraction else rect)
    pix = page.get_pixmap(matrix=fitz.Matrix(3, 3), clip=clip_rect)
    img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
    corrected = correct_rotation(img)
    preprocessed = preprocess_image(corrected)
    text = pytesseract.image_to_string(preprocessed, lang="rus")
    return re.sub(r'\s+', ' ', text)


def extract_text_from_pdf_all(pdf_path):
    """Извлекает текст со всех страниц PDF и объединяет его в одну строку."""
    doc = fitz.open(pdf_path)
    full_text = ""
    for page in doc:
        pix = page.get_pixmap(matrix=fitz.Matrix(3, 3))
        img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
        corrected = correct_rotation(img)
        preprocessed = preprocess_image(corrected)
        text = pytesseract.image_to_string(preprocessed, lang="rus")
        full_text += " " + re.sub(r'\s+', ' ', text)
    return full_text.strip()


def extract_system(text, systems_list):
    """
    Извлекает описание системы из распознанного текста,
    заменяя все варианты слова «ремонт*» на базовое слово «ремонт».
    Если после такой обработки находится совпадение со значением из systems_list,
    возвращается исходная строка из списка.
    """

    def remove_remont_endings(s):
        # Заменяем слово «ремонт» с любым окончанием на просто «ремонт»
        return re.sub(r'\bремонт\w*\b', 'ремонт', s, flags=re.IGNORECASE)

    # Обрабатываем текст из документа
    processed_text = remove_remont_endings(text)

    for system in systems_list:
        # Обрабатываем вариант из списка систем
        processed_system = remove_remont_endings(system)
        # Сравниваем в нижнем регистре
        if processed_system.lower() in processed_text.lower():
            return system
    return "Описание системы не найдено"


def extract_address(text):
    """
    Извлекает адрес из текста, ориентируясь на метку "по адресу:".
    Функция выполняет предварительную обработку:
      - заменяет переводы строки на пробелы,
      - нормализует пробельные символы,
      - если между любым символом и "по адресу:" отсутствует пробел, вставляет его.
    Затем ищется адрес по регулярному выражению.
    """
    # Объединяем все строки в одну, заменяя переводы строки пробелами
    text = ' '.join(text.split())

    # Если между любым символом и "по адресу:" нет пробела, вставляем его.
    text = re.sub(r'(\S)\s*(по адресу:)', r'\1 \2', text, flags=re.IGNORECASE)

    address_marker = "по адресу:"
    address_pattern = (
        r'(?:(?:[А-ЯЁа-яё]+\s+область)[,]?\s*)?'  # необязательное название области
        r'(?:'
        r'(?:г|д|тер|ул|пл|мкр|с|п|пр-кт|проезд)[\.,]?\s*[А-ЯЁа-яё0-9\-\s]+'  # часть адреса (город, улица и т.п.)
        r'(?:[0-9]+[а-яА-Яa-zA-Z0-9\/\-]*)?'  # возможный номер
        r'(?:\s*,\s*|\s+)'  # разделитель
        r')+'
        r'д[.,]?\s*\d+[а-яА-Яa-zA-Z0-9\/\-]*'  # блок для дома
    )

    address = "Адрес не найден"
    marker_match = re.search(re.escape(address_marker), text, re.IGNORECASE)
    if marker_match:
        substring = text[marker_match.end():]
        addr_match = re.search(address_pattern, substring, re.IGNORECASE)
        if addr_match:
            address = addr_match.group().strip()
    else:
        addr_match = re.search(address_pattern, text, re.IGNORECASE)
        if addr_match:
            address = addr_match.group().strip()

    # Удаляем лишние префиксы, если они есть (например, "ДОКУМЕНТ ПОДПИСАН ЭЛЕКТРОННОЙ ПОДПИСЬЮ")
    address = re.sub(
        r'^(?:ДОКУМЕНТ\s+ПОДПИСАН\s+ЭЛЕКТРОННОЙ\s+ПОДПИСЬЮ\s+)?(?:[А-ЯЁа-яё]+\s+область[,]?\s*)',
        '', address, flags=re.IGNORECASE
    )
    # Если адрес содержит лишний текст до нужного шаблона, пытаемся выделить адрес, начинающийся с "г."
    m = re.search(r'(г\.\s*\S.*)', address, re.IGNORECASE)
    if m:
        address = m.group(1).strip()
    return address



def extract_doc_date_number(text):
    """
    Извлекает из текста строку с номером и датой документа.
    Например: "АКТ ОБСЛЕДОВАНИЯ № 21 от« 15» 08 2024г,".
    Завершающие точки и запятые удаляются.
    """
    pattern = r'№\s*[\d\-/]+_?от\s*[«"]?\s*\d{1,2}[»"]?\s*(?:[а-яА-Я]+|\d{1,2})[_\s]*\d{4}г[.,]?'
    match = re.search(pattern, text, re.IGNORECASE)
    if match:
        doc_date = match.group().strip().rstrip(' .,')
        return doc_date
    return "Номер и дата не найдены"



def clean_address(address):
    """Удаляет лишние префиксы из адреса."""
    return re.sub(r'^(?:ДОКУМЕНТ ПОДПИСАН ЭЛЕКТРОННОЙ ПОДПИСЬЮ\s+)?(?:[А-ЯЁа-яё]+\s+область,\s*)', '', address,
                  flags=re.IGNORECASE).strip()


def parse_price_level(date_str):
    """
    Парсит строку с информацией об уровне цен и возвращает дату (последний день квартала или конкретную дату).
    Допускаются варианты с полным словом "квартал" или сокращённо "кв.".
    Если номер квартала больше 4, считается, что указан 4 квартал.
    """
    quarter_pattern = r'([IVX]+)\s*(?:квартал|кв\.?)\s+(\d{4})'
    m = re.search(quarter_pattern, date_str, re.IGNORECASE)
    if m:
        roman = m.group(1).upper()
        year = int(m.group(2))
        roman_to_int = {"I": 1, "II": 2, "III": 3, "IV": 4}
        quarter = roman_to_int.get(roman, 4)
        if quarter > 4:
            quarter = 4
        return {1: datetime.date(year, 3, 31),
                2: datetime.date(year, 6, 30),
                3: datetime.date(year, 9, 30),
                4: datetime.date(year, 12, 31)}.get(quarter)
    numeric_quarter_pattern = r'(\d+)\s*(?:квартал|кв\.?)\s+(\d{4})'
    m_num = re.search(numeric_quarter_pattern, date_str, re.IGNORECASE)
    if m_num:
        quarter = int(m_num.group(1))
        if quarter > 4:
            quarter = 4
        year = int(m_num.group(2))
        return {1: datetime.date(year, 3, 31),
                2: datetime.date(year, 6, 30),
                3: datetime.date(year, 9, 30),
                4: datetime.date(year, 12, 31)}.get(quarter)
    date_pattern = r'(\d{1,2})\s+([а-яА-Я]+)\s+(\d{4})'
    m2 = re.search(date_pattern, date_str)
    if m2:
        day = int(m2.group(1))
        month_name = m2.group(2).lower()
        year = int(m2.group(3))
        months = {"января": 1, "февраля": 2, "марта": 3, "апреля": 4, "мая": 5, "июня": 6,
                  "июля": 7, "августа": 8, "сентября": 9, "октября": 10, "ноября": 11, "декабря": 12}
        month = months.get(month_name)
        if month:
            try:
                return datetime.date(year, month, day)
            except ValueError:
                return None
    return None


def check_smeta(smeta_file, defect_address, statement_system):
    import pandas as pd
    df = pd.read_excel(smeta_file, header=None)
    all_text = ' '.join([str(x) for x in df.values.flatten() if pd.notna(x) and str(x).strip().lower() != "nan"])

    # Поиск адреса в обработанном тексте
    addr_pattern = r'по адресу:\s*([^()]+(?:д\.?\s*\d+))'
    m_addr = re.search(addr_pattern, all_text, re.IGNORECASE)
    if m_addr:
        smeta_address = m_addr.group(1).strip()
    else:
        smeta_address = "Адрес не найден"

    # Поиск описания системы среди первых 50 строк
    smeta_system = None
    for sys in systems_list:
        if sys.lower() in all_text.lower():
            smeta_system = sys
            break
    if smeta_system is None:
        smeta_system = "Описание системы не найдено"

    print("\nСмета:")
    print("Адрес:", smeta_address)
    print("Система:", smeta_system)

    # Проверка совпадения адреса после очистки
    smeta_address_clean = clean_address(smeta_address)
    defect_address_clean = clean_address(defect_address)
    if smeta_address_clean.lower() == defect_address_clean.lower():
        print("Адрес сметы совпадает с адресом дефектной ведомости.")
    else:
        print("Адрес сметы не совпадает с адресом дефектной ведомости!")
        print("Смета:", smeta_address_clean)
        print("Дефектная ведомость:", defect_address_clean)

    # Проверка совпадения системы
    if smeta_system.strip().lower() == statement_system.strip().lower():
        print("Система сметы совпадает с системой заявления.")
    else:
        print("Система сметы не совпадает с системой заявления!")
        print("Смета:", smeta_system)
        print("Заявление:", statement_system)

    # Извлечение уровня цен
    price_pattern = r'текущем\s+уровне\s+цен\s*[:]?[\s]*([^\s].+?)(?=\s{2,}|$)'
    m_price = re.search(price_pattern, all_text, re.IGNORECASE)
    if m_price:
        price_level_str = m_price.group(1).strip()
    else:
        price_pattern = r'текущем\s+уровне\s+цен\s*[:]?[\s]*([^\s].+?)(?=\s{2,}|$)'
        m_price = re.search(price_pattern, all_text, re.IGNORECASE)
        if m_price:
            price_level_str = m_price.group(1).strip()
        else:
            price_level_str = "Уровень цен не найден"

    # Дополнительная очистка строки (если нужно)
    price_level_str = re.sub(r'\s*Сметная стоимость.*$', '', price_level_str, flags=re.IGNORECASE).strip()

    # Преобразуем строку уровня цен в кортеж (дата, строка)
    price_date, price_level_display = extract_price_level_explanatory(price_level_str)

    print("\nСмета:")
    print("Уровень цен:", price_level_display)

    if price_date:
        today = datetime.date.today()
        if price_date >= today - relativedelta(months=3):
            print("Уровень цен актуален (не старше 3 месяцев).")
        else:
            print("Уровень цен устарел!")
            print("Дата уровня цен:", price_level_display)
            print("Сегодня:", today)
    else:
        print("Не удалось распознать дату уровня цен.")


def extract_price_level_explanatory(text):
    """
    Извлекает из пояснительной записки информацию об уровне цен.
    Если между числом (или римской цифрой) и словом "квартал" отсутствует пробел, он добавляется.
    Возвращает кортеж: (дата_уровня_цен, строка_с_кварталом), где
      - дата_уровня_цен — объект datetime.date (последний день соответствующего квартала),
      - строка_с_кварталом — например, "4 квартал 2024 г.".
    Если уровень цен не найден, возвращается (None, None).
    """
    # Вставляем пробел между любым непробельным символом и словом "квартал", если его нет.
    text = re.sub(r'(\S)\s*(квартал)', r'\1 \2', text, flags=re.IGNORECASE)

    # Сначала пытаемся найти шаблон с фразой "текущих ценах на"
    pattern1 = r'текущих\s+ценах\s+на\s+(\d+|[IVXУ]+)\s*(?:квартал|кв\.?)\s+(\d{4})(?:\s+года)?'
    m = re.search(pattern1, text, re.IGNORECASE)

    # Если не найдено, пробуем более общий шаблон вида "4 квартал 2024 г."
    if not m:
        pattern2 = r'(\d+|[IVXУ]+)\s*(?:квартал|кв\.?)\s+(\d{4})\s*(?:г|г\.)?'
        m = re.search(pattern2, text, re.IGNORECASE)

    if m:
        quarter_val = m.group(1).upper()
        year = int(m.group(2))
        try:
            quarter = int(quarter_val)
        except ValueError:
            # Если OCR выдал римские цифры или букву "У" вместо "IV"
            roman_to_int = {"I": 1, "II": 2, "III": 3, "IV": 4, "У": 4}
            quarter = roman_to_int.get(quarter_val, None)
        if quarter is None or quarter > 4:
            quarter = 4
        # Определяем дату — последний день соответствующего квартала
        quarter_date = {1: datetime.date(year, 3, 31),
                        2: datetime.date(year, 6, 30),
                        3: datetime.date(year, 9, 30),
                        4: datetime.date(year, 12, 31)}.get(quarter)
        quarter_str = f"{quarter} квартал {year} г."
        return (quarter_date, quarter_str)

    return (None, None)

def normalize_address_for_comparison(address):
    """
    Приводит адрес к стандартному виду для сравнения: переводит в нижний регистр,
    удаляет запятые, точки и лишние пробелы.
    """
    normalized = address.lower()
    normalized = re.sub(r'[,.]', '', normalized)
    return re.sub(r'\s+', ' ', normalized).strip()


def classify_document(file_path):
    """
    Определяет тип документа по содержимому.
    Если расширение XLSX – считается, что это Смета.
    Если PDF – извлекается весь текст и ищутся ключевые фразы (учитываются варианты слипшихся слов).
    """
    ext = os.path.splitext(file_path)[1].lower()
    if ext == ".xlsx":
        return "Смета"
    text = ""
    if ext == ".pdf":
        try:
            text = extract_text_from_pdf_all(file_path)
        except Exception:
            text = ""
    text_low = text.lower()
    norm_text = re.sub(r'\s+', '', text_low)
    keywords = {
        "Дефектная ведомость": ["дефектная ведомость"],
        "Акт обследования": ["акт обследования"],
        "Пояснительная записка": ["пояснительная записка"],
        "Смета": ["локальный сметный расчет", "сметный расчет"],
        "Договор": ["парсер"],
        "НОПРИЗ": ["выписка"],
        "Заявление": ["экспертно-консультационные услуги", "заявление"]
    }
    for doc_type, phrases in keywords.items():
        for phrase in phrases:
            if phrase in text_low or re.sub(r'\s+', '', phrase) in norm_text:
                return doc_type
    return "Неизвестный документ"


# ==============================
# Список вариантов описания системы (пример)
systems_list = [
    "Утепление фасада с применением навесного фасада",
    "Утепление фасада с применением системы с тонким наружным штукатурным слоем",
    "Утепление фасада с применением СУФ «Термолэнд»",
    "Ремонт (замена) козырьков подъездов",
    "Ремонт несущих конструкций с усилением конструктивных элементов",
    "Ремонт мягкой рулонной кровли, с утеплением, для многоквартирных домов, не имеющих чердачного помещения",
    "Замена балконных плит",
    "Ремонт металлической кровли",
    "Замена кровли из АЦЛ на оцинкованный профлист",
    "Ремонт чердачного помещения",
    "Замена стропильной системы",
    "Ремонт кровли из металлочерепицы",
    "Ремонт кровли из профнастила",
    "Ремонт чердачного помещения по периметру с утеплением",
    "Ремонт чердачного помещения с утеплителем СМЛ (стекломагниевые листы)",
    "Ремонт чердачного помещения с применением плит из минеральной ваты",
    "Ремонт чердачного помещения с керамзитом",
    "Переустройство невентилируемой крыши на вентилируемую крышу",
    "Замена стояков центрального отопления с радиаторами по новым отверстиям (если существующая система находится в стенах)",
    "Замена стояков центрального отопления без радиаторов по новым отверстиям (если существующая система находится в стенах)",
    "Замена стояков холодного водоснабжения по новым отверстиям (если существующая система находится в стене)",
    "Замена стояков горячего водоснабжения по новым отверстиям (если существующая система находится в стене)",
    "Замена системы канализации по новым отверстиям (если существующая система находится в стене)",
    "Замена системы внутреннего газопровода (без газовых плит)",
    "Ремонт или замена фасадного газопровода при утеплении фасада",
    "Ремонт или замена внутридомовой газовой разводки (без стоимости оборудования)",
    "Вынос газопровода из подъездов (без реконструкции внутридомового газопровода)",
    "Обрезка в земле подземного газопровода 1 место (протяженность подземного газопровода до места присоединения не выше 15 пог.м.)",
    "Ремонт внутреннего газопровода (без газовых плит) и внутридомовой газовой разводки (без стоимости оборудования) с установкой датчиков загазованности с клапанами",
    "Установка датчиков загазованности с клапанами при проведениикапитального ремонта системы газоснабжения",
    "Замена вводно-распределительного устройства",
    "Замена магистралей (стояки)",
    "Замена общедомовой системы освещения",
    "Замена этажного распределительного щита",
    "Замена вводно-распределительного устройства",
    "Замена магистралей (стояки)",
    "Замена общедомовой системы освещения",
    "Замена этажного распределительного щита",
    "Ремонт внутреннего противопожарного водопровода с заменой элементов и стройств системы",
    "Ремонт (замена) крышных котельных, относящихся к составу общего имущества",
    "Ремонт фундамента многоквартирного дома",
    "Замена лифта без направляющих, грузоподъёмностью 400 кг с количеством остановок 9",
    "Замена лифта без направляющих, грузоподъёмностью 630 кг с количеством остановок 9",
    "Ремонт лифтовой шахты",
    "Замена металлических ограждающих конструкций лифтовой шахты споследующей обшивкой тонколистовой сталью",
    "Ремонт или замена отдельного лифтового оборудования, в том числе направляющих",
    "Ремонт машинного помещения",
    "Замена лифта без направляющих грузоподъемностью 1000 кг с количеством остановок 20 без машинного помещения",
    "Замена лифта без направляющих грузоподъемностью 1000 кг с количеством остановок 20 с машинным помещением",
    "Замена лифта без направляющих грузоподъемностью 1275кг с количеством остановок 20 без машинного помещения",
    "Замена лифта без направляющих грузоподъемностью 1275кг с количеством остановок 20 с машинным помещением",
    "Установка узла управления тепловой энергии, в том числе заводской готовности, мощностью от 80 до 200 Мкал/час",
    "Установка узла управления тепловой энергии, в том числе заводской готовности, мощностью от 201 до 500 Мкал/час",
    "Установка узла управления системы горячего водоснабжения по двухступенчатой схеме подключения, в том числе заводской готовности, мощностью от 100 до 200 Мкал/час",
    "Установка узла управления системы горячего водоснабжения по двухступенчатой схеме подключения, в том числе заводской готовности, мощностью от 201 до 400 Мкал/час",
    "Установка коллективного (общедомового) узла учёта тепловой энергии и теплоносителя в системах центрального отопления, горячего водоснабжения, холодного водоснабжения",
    "Установка автоматизированного узла управления с секционными узлами, узла тепловой энергии, горячего водоснабжения, холодного водоснабжения",
    "Замена и (или) восстановление инженерных сетей многоквартирного дома",
    "Ремонт деревянного или смешанного фасада",
    "Ремонт кирпичного неоштукатуренного фасада",
    "Ремонт фасада панельного/блочного неоштукатуренного (без ремонта межпанельных швов)",
    "Ремонт фасада, облицованного плиткой",
    "Ремонт межпанельных швов",
    "Ремонт межпанельных швов (с применением канатного метода)",
    "Ремонт межпанельных швов с люльки",
    "Ремонт оштукатуренного фасада",
    "Ремонт панельного фасада, окрашенного (облицованного) с межпанельными швами",
    "Ремонт панельного фасада с устройством декоративно-защитного слоя и ремонтом межпанельных швов",
    "Замена системы наружного водостока",
    "Ремонт балконных плит",
    "Замена оконных и балконных блоков в местах общего пользования",
    "Замена входных дверей в подъезды, мусорокамеры на металлические двери в энергосберегающем исполнении",
    "Замена входных дверей в подъезды, наметаллические двери в энергосберегающем исполнении, с установкой IP-видеодомофонов без подключения",
    "Установка и разборка строительных лесов с защитной сеткой",
    "Ремонт мягкой рулонной кровли, без утепления, для многоквартирных домов, не имеющих чердачного помещения",
    "Ремонт мягкой безрулонной кровли",
    "Ремонт кровли из асбестоцементных листов",
    "Замена системы внутреннего водостока",
    "Ремонт мастичной кровли",
    "Ремонт резиновой кровли",
    "Ремонт внутридомовых инженерных систем",
    "Замена стояков центрального отопленияс радиаторами",
    "Замена стояков центрального отопления без отопительных приборов",
    "Замена стояков центрального отопления (подвал, чердак) с их теплоизоляцией и запорной арматурой",
    "Замена стояков центрального отопления в домах с подключенными к системе полотенцесушителями",
    "Вскрытие и восстановление полов квартир первых этажей при замене системы центрального отопления, холодного водоснабжения, горячего водоснабжения",
    "Замена стояков в квартирах с изоляцией и запорной арматурой",
    "Замена разводящих трубопроводов в подвале (чердаке) с изоляцией и запорной арматурой",
    "Замена стояков в квартирах с изоляцией и запорной арматурой",
    "Замена разводящих трубопроводов в подвале (чердаке) с изоляцией и запорной арматурой",
    "Замена системы канализации (стояки)",
    "Замена системы канализации (подвал)",
    "Вскрытие и восстановление полов квартир первых этажей при замене системы канализации",
    "Ремонт подвального помещения, относящегося к общему имуществу многоквартирного дома",
    "Ремонт подвального помещения, относящегося к общему имуществу многоквартирного дома методом гидроизоляции стен и полов",
    "Ремонт отмостки",
    "Ремонт скатной крыши",
    "Демонтаж ствола мусоропровода в МКД",
    "Ремонт системы горячего водоснабжения с установкой коллективных (общедомовых) приборов учета потребления ресурсов",
    "Обустройство колясочной в МКД",
    "Ремонт системы холодного водоснабжения с установкой коллективных (общедомовых) приборов учета потребления ресурсов",
    "Ремонт скатной крыши",
    "Ремонт плоской крыши",
    "Ремонт мансардной крыши",
    "Переустройство невентилируемой крыши на вентилируемую крышу",
    "Ремонт фасада с применением системы утепления с тонким наружным штукатурным слоем",
    "Ремонт фасада с применением навесной  системы с утеплением",
    "Ремонт фасада с применением бескаркасной системы утепления",
    "Ремонт и восстановление несущей способности конструктивных элементов фасада",
    "Замена балконных плит",
    "Ремонт внутридомовых инженерных систем электроснабжения, МКД свыше 3-х этажей",
    "Ремонт внутридомовых инженерных систем электроснабжения, МКД до 3-х этажей",
    "Ремонт системы холодного водоснабжения с установкой коллективных (общедомовых) приборов учета потребления ресурсов",
    "Ремонт противопожарного водопровода с заменой элементов системы",
    "Ремонт системы горячего водоснабжения с установкой коллективных(общедомовых) приборов учета потребления ресурсов",
    "Ремонт системы центрального отопления",
    "Ремонт системы внутреннего газопровода с датчиками контроля загазованности",
    "Ремонт системы внутреннего газопровода с датчиками контроля загазованности при газовых проточных водонагревателях",
    "Ремонт системы фасадного газопровода",
    "Установка (ремонт) узлов управления и регулирования потребления ресурсов, тепловой энергии",
    "Установка (ремонт) узлов управления и регулирования потребления ресурсов, системы горячего водоснабжения",
    "Ремонт крышных котельных, относящихся к составу общего имущества",
    "Ремонт подвального помещения, относящегося к общему имуществу многоквартирного дома",
    "Устройство гидроизоляции подвального помещения, устройство дренажной системы",
    "Ремонт фундамента многоквартирного дома",
    "Ремонт фундамента (в т.ч. отмостка)",
    "Ремонт (замена) лифтового оборудования, шахты лифта, машинных и блочных помещений",
    "Замена лифта без направляющих грузоподъемностью 400 кг",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 5",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 6",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 7",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 8",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 9",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 10",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 11",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 12",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 13",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 14",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 15",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 16",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 17",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 18",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 19",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 20",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 21",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 22",
    "Замена лифта без направляющих грузоподъемностью 400 кг с количеством остановок 23",
    "Замена лифта без направляющих грузоподъемностью 630 кг",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 5",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 6",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 7",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 8",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 9",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 10",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 11",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 12",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 13",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 14",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 15",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 16",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 17",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 18",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 19",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 20",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 21",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 22",
    "Замена лифта без направляющих грузоподъемностью 630 кг с количеством остановок 23",
    "Замена лифта без направляющих грузоподъемностью 1000 кг",
    "Замена лифта без направляющих грузоподъемностью 1000 кг с количеством остановок 18",
    "Замена лифта без направляющих грузоподъемностью 1000 кг с количеством остановок 19",
    "Замена лифта без направляющих грузоподъемностью 1000 кг с количеством остановок 20",
    "Замена лифта без направляющих грузоподъемностью 1000 кг с количеством остановок 21",
    "Замена лифта без направляющих грузоподъемностью 1000 кг с количеством остановок 22",
    "Замена лифта без направляющих грузоподъемностью 1000 кг с количеством остановок 23",
    "Замена лифта без направляющих грузоподъемностью 1275 кг",
    "Замена лифта без направляющих грузоподъемностью 1275 кг с количеством остановок 18",
    "Замена лифта без направляющих грузоподъемностью 1275 кг с количеством остановок 19",
    "Замена лифта без направляющих грузоподъемностью 1275 кг с количеством остановок 20",
    "Замена лифта без направляющих грузоподъемностью 1275 кг с количеством остановок 21",
    "Замена лифта без направляющих грузоподъемностью 1275 кг с количеством остановок 22",
    "Замена лифта без направляющих грузоподъемностью 1275 кг с количеством остановок 23",
    "Устройство одной дополнительной остановки лифта",
    "Стоимость работ по устройству одной дополнительной остановки лифта грузоподъемностью 400 кг (добавляется или вычитается)",
    "Стоимость работ по устройству одной дополнительной остановки лифта грузоподъемностью 630 кг (добавляется или вычитается)",
    "Стоимость работ по устройству одной дополнительной остановки лифта грузоподъемностью 1000 кг (добавляется или вычитается)",
    "Стоимость работ по устройству одной дополнительной остановки лифта грузоподъемностью 1275 кг (добавляется или вычитается)",
    "Ремонт шахты лифта",
    "Замена металлических ограждающих конструкций лифтовой шахты с последующей обшивкой тонколистовой сталью",
    "Ремонт или замена отдельного лифтового оборудования, в том числе направляющих",
    "Ремонт машинного помещения",
    "Демонтаж ствола мусоропровода",
    "Обустройство колясочной",
    "Ремонт кирпичного фасада без утепления",
    "Ремонт панельного/блочного фасада без утепления с устройством декоративно-защитного слоя",
    "Ремонт панельного/блочного фасада без утепления окрашенного",
    "Ремонт деревянного или смешанного фасада",
    "Нанесение изображений путем покраски, наклейки, росписи в технике «граффити» и иными способами на внешние поверхности многоквартирных домов",
    "Ремонт системы водоотведения",
    "Вскрытие и восстановление полов при замене системы отопления, канализации, холодного водоснабжения, горячего водоснабжения",
    "Ремонт подвального помещения"
]


# ==============================
# --- Обработчики Telegram ---

@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(message.chat.id,
                     "Здравствуйте! Отправьте мне пакет документов. Вы можете присылать файлы в любом порядке. "
                     "После загрузки всех файлов введите команду /process. Я определю тип каждого документа и подготовлю подробный отчёт. ")


@bot.message_handler(content_types=['document'])
def handle_document(message):
    chat_id = message.chat.id
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    filename = message.document.file_name
    file_path = os.path.join(TEMP_DIR, filename)
    with open(file_path, "wb") as new_file:
        new_file.write(downloaded_file)
    if chat_id not in user_files:
        user_files[chat_id] = []
    user_files[chat_id].append(file_path)
    doc_type = classify_document(file_path)
    bot.reply_to(message,
                 f"Файл получен: {filename}\nОпределённый тип документа: {doc_type}\nЕсли все файлы загружены, введите команду /process.")


@bot.message_handler(commands=['process'])
def process_handler(message):
    chat_id = message.chat.id
    if chat_id not in user_files or not user_files[chat_id]:
        bot.send_message(chat_id, "Нет документов для обработки. Пожалуйста, отправьте файлы.")
        return
    bot.send_message(chat_id, "Идет анализ информации, пожалуйста, подождите...")

    # Распределяем файлы по типу (если несколько одного типа – берём первый)
    docs = {}
    for file_path in user_files[chat_id]:
        doc_type = classify_document(file_path)
        if doc_type not in docs:
            docs[doc_type] = file_path

    # Если договор не найден, добавляем уведомление
    if "Договор" not in docs:
        docs["ЭКУ"] = "Документы по ЭКУ"

    expected_docs = ["Заявление", "Дефектная ведомость", "Акт обследования", "Пояснительная записка", "Смета"]
    missing_docs = [doc for doc in expected_docs if doc not in docs]

    result_lines = []
    result_lines.append("Получилось! Вот результаты проверки ваших документов:")

    if missing_docs:
        result_lines.append("Отсутствуют следующие документы: " + ", ".join(missing_docs))
    else:
        result_lines.append("Все обязательные документы присутствуют.\n")

    # Пример дальнейшей обработки:
    statement_file = docs.get("Заявление")
    defect_file = docs.get("Дефектная ведомость")
    act_file = docs.get("Акт обследования")
    explanatory_file = docs.get("Пояснительная записка")
    smeta_file = docs.get("Смета")
    dogovor_file = docs.get("Договор")
    nopriz_file = docs.get("НОПРИЗ")


    if not dogovor_file:
        result_lines.append("Внимание: договор не найден. Загружены документы по ЭКУ.\n")

    # Обработка заявления
    if statement_file:
        st_text = extract_text_from_pdf(statement_file, skip_top_fraction=1 / 6)
        st_system = extract_system(st_text, systems_list)
        st_address = extract_address(st_text)
        result_lines.append("Заявление:")
        result_lines.append(f"Система: {st_system}")
        result_lines.append(f"Адрес: {st_address}\n")
    else:
        result_lines.append("Заявление не найдено.\n")

    # Обработка дефектной ведомости
    if defect_file:
        df_text = extract_text_from_pdf(defect_file)
        df_system = extract_system(df_text, systems_list)
        df_address = extract_address(df_text)
        df_doc = extract_doc_date_number(df_text)
        result_lines.append("Дефектная ведомость:")
        result_lines.append(f"Система: {df_system}")
        result_lines.append(f"Адрес: {df_address}")
        result_lines.append(f"Номер и дата: {df_doc}\n")
    else:
        result_lines.append("Дефектная ведомость не найдена.\n")

    if statement_file and defect_file:
        if normalize_address_for_comparison(st_address) != normalize_address_for_comparison(df_address):
            result_lines.append("Обнаружено различие в адресах между Заявлением и Дефектной ведомостью:")
            result_lines.append(f"Заявление: {st_address}")
            result_lines.append(f"Дефектная ведомость: {df_address}\n")
        else:
            result_lines.append("Адреса Заявления и Дефектной ведомости совпадают.\n")
        if st_system.lower() != df_system.lower():
            result_lines.append("Обнаружено различие в системах между Заявлением и Дефектной ведомостью:")
            result_lines.append(f"Заявление: {st_system}")
            result_lines.append(f"Дефектная ведомость: {df_system}\n")
        else:
            result_lines.append("Системы Заявления и Дефектной ведомости совпадают.\n")

    # Обработка сметы
    if smeta_file:
        smeta_output = io.StringIO()
        with contextlib.redirect_stdout(smeta_output):
            check_smeta(smeta_file, df_address if defect_file else "", st_system if statement_file else "")
        result_lines.append(smeta_output.getvalue())
    else:
        result_lines.append("Смета не найдена.\n")

    # Обработка акта обследования
    if act_file:
        act_text = extract_text_from_pdf(act_file)
        act_system = extract_system(act_text, systems_list)
        act_address = extract_address(act_text)
        act_doc = extract_doc_date_number(act_text)
        result_lines.append("Акт обследования:")
        result_lines.append(f"Система: {act_system}")
        result_lines.append(f"Адрес: {act_address}")
        result_lines.append(f"Номер и дата: {act_doc}\n")
        if act_doc.lower() == df_doc.lower():
            result_lines.append("Номер и дата акта обследования совпадают с данными Дефектной ведомости.")
        else:
            result_lines.append("Номер и/или дата акта обследования НЕ совпадают с данными Дефектной ведомости.")
            result_lines.append(f"Акт: {act_doc}")
            result_lines.append(f"Дефектная ведомость: {df_doc}\n")
        if normalize_address_for_comparison(act_address) == normalize_address_for_comparison(df_address):
            result_lines.append("Адрес акта обследования совпадает с адресом Дефектной ведомости.")
        else:
            result_lines.append("Адрес акта обследования НЕ совпадает с адресом Дефектной ведомости.")
            result_lines.append(f"Акт: {act_address}")
            result_lines.append(f"Дефектная ведомость: {df_address}\n")
        if act_system.lower() == df_system.lower():
            result_lines.append("Система акта обследования совпадает с системой Дефектной ведомости.\n")
        else:
            result_lines.append("Система акта обследования НЕ совпадает с системой Дефектной ведомости.")
            result_lines.append(f"Акт: {act_system}")
            result_lines.append(f"Дефектная ведомость: {df_system}\n")
    else:
        result_lines.append("Акт обследования не найден.\n")

    # Обработка пояснительной записки
    if explanatory_file:
        expl_text = extract_text_from_pdf_all(explanatory_file)
        expl_system = extract_system(expl_text, systems_list)
        expl_address = extract_address(expl_text)
        # Разбиваем результат на дату и строку
        expl_price_date, expl_price_display = extract_price_level_explanatory(expl_text)

        result_lines.append("Пояснительная записка:")
        result_lines.append(f"Система: {expl_system}")
        result_lines.append(f"Адрес: {expl_address}")
        if expl_price_display:
            result_lines.append(f"Дата уровня цен: {expl_price_display}")
        else:
            result_lines.append("Не удалось распознать уровень цен в пояснительной записке.")

        if normalize_address_for_comparison(expl_address) == normalize_address_for_comparison(df_address):
            result_lines.append("Адрес пояснительной записки совпадает с адресом Дефектной ведомости.")
        else:
            result_lines.append("Адрес пояснительной записки НЕ совпадает с адресом Дефектной ведомости.")
            result_lines.append(f"Пояснительная: {expl_address}")
            result_lines.append(f"Дефектная ведомость: {df_address}")

        if expl_system.lower() == df_system.lower():
            result_lines.append("Система пояснительной записки совпадает с системой Дефектной ведомости.")
        else:
            result_lines.append("Система пояснительной записки НЕ совпадает с системой Дефектной ведомости.")
            result_lines.append(f"Пояснительная: {expl_system}")
            result_lines.append(f"Дефектная ведомость: {df_system}")

        if expl_price_date:
            today = datetime.date.today()
            if expl_price_date >= today - relativedelta(months=3):
                result_lines.append("Уровень цен в пояснительной записке актуален (не старше 3 месяцев).")
            else:
                result_lines.append("Уровень цен в пояснительной записке устарел!")
                result_lines.append(f"Дата: {expl_price_display}")
                result_lines.append(f"Сегодня: {today}")
        else:
            result_lines.append("Не удалось распознать уровень цен в пояснительной записке.")
    else:
        result_lines.append("Пояснительная записка не найдена.\n")

    # После завершения обработки очищаем список файлов для этого пользователя.
    user_files[chat_id] = []

    final_result = "\n".join(result_lines)
    for chunk in [final_result[i:i + 4096] for i in range(0, len(final_result), 4096)]:
        bot.send_message(chat_id, chunk)


@bot.message_handler(commands=['process'])
def process_command(message):
    process_handler(message)


# ==============================
while True:
    try:
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        print("Ошибка: ", e)
        time.sleep(15)  # Ждем 15 секунд перед перезапуском polling